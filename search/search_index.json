{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SPDX 3.0 Canonical Serialisation Welcome to the website for the SPDX 3.0 Canonical Serialisation specification! SPDX supports many serialisation formats, including JSON, YAML and XML. Whilst this feature greatly improves the flexibility of SPDX, it also brings up questions about the integrity of the data: for instance, if an XML file of SPDX data is cryptographically signed, how can that signature be trusted after the data is converted from XML to another format? The solution is the SPDX Canonical Serialisation: a representation of SPDX data that is never ambiguous and is unaffected by stylistic or platform-specific concerns. By using the Canonical Serialisation, everyone who creates, receives or processes SPDX data can verify the integrity of its individual, constituent SPDX Elements regardless of the serialisation format originally used. This is currently a draft , so parts may be incomplete or change substantially without notice. Although this website expresses aspects of the specification as they are agreed on by the SPDX Canonicalisation Committee, it shouldn't be considered an official SPDX standard until reasonable consensus has been obtained on the final draft as a whole. Please see section 5 of the SPDX Governance for more details. If you would like to contribute to the development of this specification, please introduce yourself on the SPDX Technical Team mailing list . You are welcome to join the weekly Canonicalisation Committee meeting !","title":"Home"},{"location":"#spdx-30-canonical-serialisation","text":"Welcome to the website for the SPDX 3.0 Canonical Serialisation specification! SPDX supports many serialisation formats, including JSON, YAML and XML. Whilst this feature greatly improves the flexibility of SPDX, it also brings up questions about the integrity of the data: for instance, if an XML file of SPDX data is cryptographically signed, how can that signature be trusted after the data is converted from XML to another format? The solution is the SPDX Canonical Serialisation: a representation of SPDX data that is never ambiguous and is unaffected by stylistic or platform-specific concerns. By using the Canonical Serialisation, everyone who creates, receives or processes SPDX data can verify the integrity of its individual, constituent SPDX Elements regardless of the serialisation format originally used. This is currently a draft , so parts may be incomplete or change substantially without notice. Although this website expresses aspects of the specification as they are agreed on by the SPDX Canonicalisation Committee, it shouldn't be considered an official SPDX standard until reasonable consensus has been obtained on the final draft as a whole. Please see section 5 of the SPDX Governance for more details. If you would like to contribute to the development of this specification, please introduce yourself on the SPDX Technical Team mailing list . You are welcome to join the weekly Canonicalisation Committee meeting !","title":"SPDX 3.0 Canonical Serialisation"},{"location":"introduction/","text":"Introduction","title":"Introduction"},{"location":"introduction/#introduction","text":"","title":"Introduction"},{"location":"datatypes/","text":"Data Types","title":"Index"},{"location":"datatypes/#data-types","text":"","title":"Data Types"},{"location":"datatypes/datetime/","text":"DateTime DateTime is a signed integer of milliseconds since or before the Unix Epoch 1 . DateTime MUST be expressed as a series of base-10 digits, and MUST NOT be expressed with any leading zeroes, an exponent, a decimal point or a fractional part. Examples Valid Canonical value Semantic meaning 1657544400200 14:00:00.2 UTC on the 11th of July, 2022 -127573208000 13:00:08 UTC on the 16th of December, 1965 Invalid Invalid value Reason -000144960400000 Leading zeroes are not allowed 1259607600000.141 Fractional parts are not allowed See https://en.wikipedia.org/wiki/Unix_time \u21a9","title":"DateTime"},{"location":"datatypes/datetime/#datetime","text":"DateTime is a signed integer of milliseconds since or before the Unix Epoch 1 . DateTime MUST be expressed as a series of base-10 digits, and MUST NOT be expressed with any leading zeroes, an exponent, a decimal point or a fractional part.","title":"DateTime"},{"location":"datatypes/datetime/#examples","text":"","title":"Examples"},{"location":"datatypes/datetime/#valid","text":"Canonical value Semantic meaning 1657544400200 14:00:00.2 UTC on the 11th of July, 2022 -127573208000 13:00:08 UTC on the 16th of December, 1965","title":"Valid"},{"location":"datatypes/datetime/#invalid","text":"Invalid value Reason -000144960400000 Leading zeroes are not allowed 1259607600000.141 Fractional parts are not allowed See https://en.wikipedia.org/wiki/Unix_time \u21a9","title":"Invalid"}]}